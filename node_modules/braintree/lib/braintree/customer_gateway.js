//@ sourceMappingURL=customer_gateway.map
// Generated by CoffeeScript 1.6.1
var Customer, CustomerGateway, CustomerSearch, Gateway, exceptions, util, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Gateway = require('./gateway').Gateway;

Customer = require('./customer').Customer;

CustomerSearch = require('./customer_search').CustomerSearch;

util = require('util');

_ = require('underscore');

exceptions = require('./exceptions');

CustomerGateway = (function(_super) {

  __extends(CustomerGateway, _super);

  function CustomerGateway(gateway) {
    this.gateway = gateway;
  }

  CustomerGateway.prototype.create = function(attributes, callback) {
    return this.gateway.http.post('/customers', {
      customer: attributes
    }, this.responseHandler(callback));
  };

  CustomerGateway.prototype["delete"] = function(customerId, callback) {
    return this.gateway.http["delete"]("/customers/" + customerId, callback);
  };

  CustomerGateway.prototype.find = function(customerId, callback) {
    if (customerId.trim() === '') {
      return callback(exceptions.NotFoundError(), null);
    } else {
      return this.gateway.http.get("/customers/" + customerId, function(err, response) {
        if (err) {
          return callback(err, null);
        } else {
          return callback(null, new Customer(response.customer));
        }
      });
    }
  };

  CustomerGateway.prototype.update = function(customerId, attributes, callback) {
    return this.gateway.http.put("/customers/" + customerId, {
      customer: attributes
    }, this.responseHandler(callback));
  };

  CustomerGateway.prototype.search = function(fn, callback) {
    var search;
    search = new CustomerSearch();
    fn(search);
    return this.gateway.http.post("/customers/advanced_search_ids", {
      search: search.toHash()
    }, this.searchResponseHandler(this.pagingFunctionGenerator(search), callback));
  };

  CustomerGateway.prototype.responseHandler = function(callback) {
    return this.createResponseHandler("customer", Customer, callback);
  };

  CustomerGateway.prototype.pagingFunctionGenerator = function(search) {
    var _this = this;
    return function(ids, callback) {
      var searchCriteria;
      searchCriteria = search.toHash();
      searchCriteria["ids"] = ids;
      return _this.gateway.http.post("/customers/advanced_search", {
        search: searchCriteria
      }, function(err, response) {
        var customer, _i, _len, _ref, _results;
        if (err) {
          return callback(err, null);
        } else {
          if (_.isArray(response.customers.customer)) {
            _ref = response.customers.customer;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              customer = _ref[_i];
              _results.push(callback(null, new Customer(customer)));
            }
            return _results;
          } else {
            return callback(null, new Customer(response.customers.customer));
          }
        }
      });
    };
  };

  return CustomerGateway;

})(Gateway);

exports.CustomerGateway = CustomerGateway;
